/**********************************************************************
Copyright (c) 2002 IBM Corp. and others.
All rights reserved.   This program and the accompanying materials
are made available under the terms of the Common Public License v0.5
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/cpl-v05.html
 
Contributors:
     IBM Corporation - initial API and implementation
     Palo Alto Research Center, Incorporated - AspectJ adaptation
**********************************************************************/

package org.eclipse.jdt.core.compiler;
 
/**
 * Maps each terminal symbol in the java-grammar into a unique integer. 
 * This integer is used to represent the terminal when computing a parsing action. 
 * 
 * <p>Disclaimer : These constant values are generated automatically using a Java 
 * grammar, therefore their actual values are subject to change if new keywords 
 * were added to the language (i.e. 'assert' keyword in 1.4).
 * 
 * <p><b>The contents of this file are generated automatically by jikespg from
 * org/eclipse/jdt/internal/compiler/parser/aj_grammar.txt.  It includes
 * 7 symbols that are only needed for the AspectJ grammar. These symbols will
 * never be returned by org.eclipse.jdt.internal.compiler.parser.Scanner.
 * However, this auto-generation means that all symbols have different values than
 * they do when generated from the Java grammar.  This design needs to be 
 * changed for AspectJ to be implemented as a clean extension to the jdt compiler.</b>
 * 
 * XXX unacceptable extension design
 * 
 * 
 * @see IScanner
 * @since 2.0
 */
public interface ITerminalSymbols {

	// special tokens not part of grammar - not autogenerated
	int 
		TokenNameWHITESPACE = 1000,
		TokenNameCOMMENT_LINE = 1001,
		TokenNameCOMMENT_BLOCK = 1002,
		TokenNameCOMMENT_JAVADOC = 1003;
	
    public final static int
      TokenNameIdentifier = 5,
      TokenNameabstract = 97,
      TokenNameassert = 128,
      TokenNameboolean = 24,
      TokenNamebreak = 129,
      TokenNamebyte = 25,
      TokenNamecase = 178,
      TokenNamecatch = 181,
      TokenNamechar = 26,
      TokenNameclass = 176,
      TokenNamecontinue = 130,
      TokenNamedefault = 251,
      TokenNamedo = 131,
      TokenNamedouble = 27,
      TokenNameelse = 179,
      TokenNameextends = 182,
      TokenNamefalse = 43,
      TokenNamefinal = 98,
      TokenNamefinally = 183,
      TokenNamefloat = 28,
      TokenNamefor = 132,
      TokenNameif = 133,
      TokenNameimplements = 200,
      TokenNameimport = 173,
      TokenNameinstanceof = 76,
      TokenNameint = 29,
      TokenNameinterface = 206,
      TokenNamelong = 30,
      TokenNamenative = 99,
      TokenNamenew = 40,
      TokenNamenull = 44,
      TokenNamepackage = 180,
      TokenNameprivate = 100,
      TokenNameprotected = 101,
      TokenNamepublic = 102,
      TokenNamereturn = 134,
      TokenNameshort = 31,
      TokenNamestatic = 96,
      TokenNamestrictfp = 103,
      TokenNamesuper = 41,
      TokenNameswitch = 135,
      TokenNamesynchronized = 92,
      TokenNamethis = 42,
      TokenNamethrow = 136,
      TokenNamethrows = 169,
      TokenNametransient = 104,
      TokenNametrue = 45,
      TokenNametry = 137,
      TokenNamevoid = 32,
      TokenNamevolatile = 105,
      TokenNamewhile = 127,
      TokenNameaspect = 9,
      TokenNamepointcut = 11,
      TokenNamearound = 17,
      TokenNamebefore = 13,
      TokenNameafter = 14,
      TokenNamedeclare = 12,
      TokenNameprivileged = 10,
      TokenNameIntegerLiteral = 46,
      TokenNameLongLiteral = 47,
      TokenNameFloatingPointLiteral = 48,
      TokenNameDoubleLiteral = 49,
      TokenNameCharacterLiteral = 50,
      TokenNameStringLiteral = 51,
      TokenNamePLUS_PLUS = 1,
      TokenNameMINUS_MINUS = 2,
      TokenNameEQUAL_EQUAL = 55,
      TokenNameLESS_EQUAL = 79,
      TokenNameGREATER_EQUAL = 80,
      TokenNameNOT_EQUAL = 56,
      TokenNameLEFT_SHIFT = 23,
      TokenNameRIGHT_SHIFT = 21,
      TokenNameUNSIGNED_RIGHT_SHIFT = 22,
      TokenNamePLUS_EQUAL = 184,
      TokenNameMINUS_EQUAL = 185,
      TokenNameMULTIPLY_EQUAL = 186,
      TokenNameDIVIDE_EQUAL = 187,
      TokenNameAND_EQUAL = 188,
      TokenNameOR_EQUAL = 189,
      TokenNameXOR_EQUAL = 190,
      TokenNameREMAINDER_EQUAL = 191,
      TokenNameLEFT_SHIFT_EQUAL = 192,
      TokenNameRIGHT_SHIFT_EQUAL = 193,
      TokenNameUNSIGNED_RIGHT_SHIFT_EQUAL = 194,
      TokenNameOR_OR = 84,
      TokenNameAND_AND = 81,
      TokenNamePLUS = 3,
      TokenNameMINUS = 4,
      TokenNameNOT = 78,
      TokenNameREMAINDER = 15,
      TokenNameXOR = 77,
      TokenNameAND = 74,
      TokenNameMULTIPLY = 8,
      TokenNameOR = 85,
      TokenNameTWIDDLE = 86,
      TokenNameDIVIDE = 16,
      TokenNameGREATER = 82,
      TokenNameLESS = 83,
      TokenNameLPAREN = 7,
      TokenNameRPAREN = 93,
      TokenNameLBRACE = 125,
      TokenNameRBRACE = 115,
      TokenNameLBRACKET = 18,
      TokenNameRBRACKET = 167,
      TokenNameSEMICOLON = 75,
      TokenNameQUESTION = 95,
      TokenNameCOLON = 126,
      TokenNameCOMMA = 107,
      TokenNameDOT = 6,
      TokenNameEQUAL = 170,
      TokenNameEOF = 171,
      TokenNameERROR = 353;
}
